{"version":3,"file":"main.c4500d563db0f5c02506.hot-update.js","sources":["webpack:///./stories/organisms/Editor/EditorIndex.tsx"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\r\n/* eslint-disable react/prop-types */\r\n// @ts-nocheck\r\nimport React, {\r\n    useState, useCallback, useEffect,\r\n  } from 'react'\r\n  import * as Y from 'yjs'\r\n  import { WebsocketProvider } from 'y-websocket'\r\n  import { IndexeddbPersistence } from 'y-indexeddb'\r\n  import { useEditor, EditorContent } from '@tiptap/react'\r\n  import StarterKit from '@tiptap/starter-kit'\r\n  import TaskList from '@tiptap/extension-task-list'\r\n  import TaskItem from '@tiptap/extension-task-item'\r\n  import Highlight from '@tiptap/extension-highlight'\r\n  import CharacterCount from '@tiptap/extension-character-count'\r\n  import Collaboration from '@tiptap/extension-collaboration'\r\n  import CollaborationCursor from '@tiptap/extension-collaboration-cursor'\r\n  import MenuBar from './MenuBar'\r\n  import './styles.scss'\r\n  \r\n  const colors = ['#958DF1', '#F98181', '#FBBC88', '#FAF594', '#70CFF8', '#94FADB', '#B9F18D']\r\n  const rooms = ['rooms.10', 'rooms.11', 'rooms.12']\r\n  const names = [\r\n    'Lea Thompson',\r\n    'Cyndi Lauper',\r\n    'Tom Cruise',\r\n    'Madonna',\r\n    'Jerry Hall',\r\n    'Joan Collins',\r\n    'Winona Ryder',\r\n    'Christina Applegate',\r\n    'Alyssa Milano',\r\n    'Molly Ringwald',\r\n    'Ally Sheedy',\r\n    'Debbie Harry',\r\n    'Olivia Newton-John',\r\n    'Elton John',\r\n    'Michael J. Fox',\r\n    'Axl Rose',\r\n    'Emilio Estevez',\r\n    'Ralph Macchio',\r\n    'Rob Lowe',\r\n    'Jennifer Grey',\r\n    'Mickey Rourke',\r\n    'John Cusack',\r\n    'Matthew Broderick',\r\n    'Justine Bateman',\r\n    'Lisa Bonet',\r\n  ]\r\n  \r\n  const getRandomElement = list => list[Math.floor(Math.random() * list.length)]\r\n  \r\n  const getRandomRoom = () => getRandomElement(rooms)\r\n  const getRandomColor = () => getRandomElement(colors)\r\n  const getRandomName = () => getRandomElement(names)\r\n  \r\n  const room = getRandomRoom()\r\n  \r\n  const ydoc = new Y.Doc()\r\n  const websocketProvider = new WebsocketProvider('wss://connect.tiptap.dev', room, ydoc)\r\n  \r\n  const getInitialUser = () => JSON.parse(localStorage.getItem('currentUser')) || {\r\n      name: getRandomName(),\r\n      color: getRandomColor(),\r\n    }\r\n  \r\n  export default () => {\r\n    const [status, setStatus] = useState('connecting')\r\n    const [currentUser, setCurrentUser] = useState(getInitialUser)\r\n  \r\n    const editor = useEditor({\r\n      extensions: [\r\n        StarterKit.configure({\r\n          history: false,\r\n        }),\r\n        Highlight,\r\n        TaskList,\r\n        TaskItem,\r\n        CharacterCount.configure({\r\n          limit: 10000,\r\n        }),\r\n        Collaboration.configure({\r\n          document: ydoc,\r\n        }),\r\n        CollaborationCursor.configure({\r\n          provider: websocketProvider,\r\n        }),\r\n      ],\r\n    })\r\n  \r\n    useEffect(() => {\r\n      // Store shared data persistently in browser to make offline editing possible\r\n      const indexeddbProvider = new IndexeddbPersistence(room, ydoc)\r\n  \r\n      indexeddbProvider.on('synced', () => {\r\n        console.log('Loaded content from database â€¦')\r\n      })\r\n  \r\n      // Update status changes\r\n      websocketProvider.on('status', event => {\r\n        setStatus(event.status)\r\n      })\r\n    }, [])\r\n  \r\n    // Save current user to localStorage and emit to editor\r\n    useEffect(() => {\r\n      if (editor && currentUser) {\r\n        localStorage.setItem('currentUser', JSON.stringify(currentUser))\r\n        editor.chain().focus().updateUser(currentUser).run()\r\n      }\r\n    }, [editor, currentUser])\r\n  \r\n    const setName = useCallback(() => {\r\n      const name = (window.prompt('Name') || '').trim().substring(0, 32)\r\n  \r\n      if (name) {\r\n        return setCurrentUser({ ...currentUser, name })\r\n      }\r\n    }, [currentUser])\r\n  \r\n    return (\r\n      <div className=\"editor\">\r\n        {editor && <MenuBar editor={editor} />}\r\n        <EditorContent className=\"editor__content\" editor={editor} />\r\n        <div className=\"editor__footer\">\r\n            <div className={`editor__status editor__status--${status}`}>\r\n              {status === 'connected'\r\n                ? `${editor.storage.collaborationCursor.users.length} user${editor.storage.collaborationCursor.users.length === 1 ? '' : 's'} online in ${room}`\r\n                : 'offline'}\r\n            </div>\r\n            <div className=\"editor__name\">\r\n              <button onClick={setName}>{currentUser.name}</button>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    )\r\n  }"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AA2BA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AADA;AAOA;AADA;AAIA;AADA;AAIA;AADA;AAdA;AAoBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AADA;AANA;AAHA;AAeA;;;;A","sourceRoot":""}