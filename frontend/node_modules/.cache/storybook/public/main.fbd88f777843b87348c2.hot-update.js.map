{"version":3,"file":"main.fbd88f777843b87348c2.hot-update.js","sources":["webpack:///./stories/organisms/Editor/Editor.tsx","webpack:///./stories/organisms/Editor/MenuBar.tsx","webpack:///./stories/organisms/Editor/MenuItem.tsx"],"sourcesContent":["import React from \"react\";\nimport \"./Editor.css\";\nimport { useEditor, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\nimport Highlight from '@tiptap/extension-highlight'\nimport MenuBar from './MenuBar';\n\ninterface EditorProps {\n  /**\n   * React className 설정\n   */\n  className?: string[];\n\n  /**\n   * style 설정\n   */\n  style?: object;\n}\n\n/**\n * Primary UI component for user interaction\n */\nconst Editor = ({ className, style }: EditorProps) => {\n   \n  const TipTap = () => {\n    \n    const editorSetting = useEditor({\n      extensions: [\n        StarterKit,\n        Document,\n        Paragraph,\n        Text,\n        Highlight\n      ],\n      content: '<p>Hello World! </p>'\n    })\n  \n    return (\n      <>\n        {editorSetting && <MenuBar editor={editorSetting} />}\n        <EditorContent\n        className={`${className.join(' ')}`}\n        style={style}\n        editor={editorSetting} />\n      </>\n        )\n  }\n\n  return <TipTap />\n  \n\n}\n\n\n/**\n * Header 기본 props 설정\n */\nEditor.defaultProps = {\n  className: [],\n  style: {},\n};\n\nexport default Editor;\n","import React, { Fragment } from 'react'\r\nimport MenuItem from './MenuItem'\r\nimport './MenuBar.scss'\r\n\r\nexport default ({ editor }) => {\r\n  const items = [\r\n    {\r\n      icon: 'bold',\r\n      title: 'Bold',\r\n      action: () => editor.chain().focus().toggleBold().run(),\r\n      isActive: () => editor.isActive('bold'),\r\n    },\r\n    {\r\n      icon: 'italic',\r\n      title: 'Italic',\r\n      action: () => editor.chain().focus().toggleItalic().run(),\r\n      isActive: () => editor.isActive('italic'),\r\n    },\r\n    {\r\n      icon: 'strikethrough',\r\n      title: 'Strike',\r\n      action: () => editor.chain().focus().toggleStrike().run(),\r\n      isActive: () => editor.isActive('strike'),\r\n    },\r\n    {\r\n      icon: 'code-view',\r\n      title: 'Code',\r\n      action: () => editor.chain().focus().toggleCode().run(),\r\n      isActive: () => editor.isActive('code'),\r\n    },\r\n    {\r\n      icon: 'mark-pen-line',\r\n      title: 'Highlight',\r\n      action: () => editor.chain().focus().toggleHighlight().run(),\r\n      isActive: () => editor.isActive('highlight'),\r\n    },\r\n    {\r\n      type: 'divider',\r\n    },\r\n    {\r\n      icon: 'h-1',\r\n      title: 'Heading 1',\r\n      action: () => editor.chain().focus().toggleHeading({ level: 1 }).run(),\r\n      isActive: () => editor.isActive('heading', { level: 1 }),\r\n    },\r\n    {\r\n      icon: 'h-2',\r\n      title: 'Heading 2',\r\n      action: () => editor.chain().focus().toggleHeading({ level: 2 }).run(),\r\n      isActive: () => editor.isActive('heading', { level: 2 }),\r\n    },\r\n    {\r\n      icon: 'paragraph',\r\n      title: 'Paragraph',\r\n      action: () => editor.chain().focus().setParagraph().run(),\r\n      isActive: () => editor.isActive('paragraph'),\r\n    },\r\n    {\r\n      icon: 'list-unordered',\r\n      title: 'Bullet List',\r\n      action: () => editor.chain().focus().toggleBulletList().run(),\r\n      isActive: () => editor.isActive('bulletList'),\r\n    },\r\n    {\r\n      icon: 'list-ordered',\r\n      title: 'Ordered List',\r\n      action: () => editor.chain().focus().toggleOrderedList().run(),\r\n      isActive: () => editor.isActive('orderedList'),\r\n    },\r\n    {\r\n      icon: 'list-check-2',\r\n      title: 'Task List',\r\n      action: () => editor.chain().focus().toggleTaskList().run(),\r\n      isActive: () => editor.isActive('taskList'),\r\n    },\r\n    {\r\n      icon: 'code-box-line',\r\n      title: 'Code Block',\r\n      action: () => editor.chain().focus().toggleCodeBlock().run(),\r\n      isActive: () => editor.isActive('codeBlock'),\r\n    },\r\n    {\r\n      type: 'divider',\r\n    },\r\n    {\r\n      icon: 'double-quotes-l',\r\n      title: 'Blockquote',\r\n      action: () => editor.chain().focus().toggleBlockquote().run(),\r\n      isActive: () => editor.isActive('blockquote'),\r\n    },\r\n    {\r\n      icon: 'separator',\r\n      title: 'Horizontal Rule',\r\n      action: () => editor.chain().focus().setHorizontalRule().run(),\r\n    },\r\n    {\r\n      type: 'divider',\r\n    },\r\n    {\r\n      icon: 'text-wrap',\r\n      title: 'Hard Break',\r\n      action: () => editor.chain().focus().setHardBreak().run(),\r\n    },\r\n    {\r\n      icon: 'format-clear',\r\n      title: 'Clear Format',\r\n      action: () => editor.chain().focus().clearNodes().unsetAllMarks()\r\n        .run(),\r\n    },\r\n    {\r\n      type: 'divider',\r\n    },\r\n    {\r\n      icon: 'arrow-go-back-line',\r\n      title: 'Undo',\r\n      action: () => editor.chain().focus().undo().run(),\r\n    },\r\n    {\r\n      icon: 'arrow-go-forward-line',\r\n      title: 'Redo',\r\n      action: () => editor.chain().focus().redo().run(),\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <div className=\"editor__header\">\r\n      {items.map((item, index) => (\r\n        <Fragment key={index}>\r\n          {item.type === 'divider' ? <div className=\"divider\" /> : <MenuItem {...item} />}\r\n        </Fragment>\r\n      ))}\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport './MenuItem.scss'\r\nimport remixiconUrl from 'remixicon/fonts/remixicon.symbol.svg'\r\n\r\nexport default ({\r\n  icon, title, action, isActive = null,\r\n}) => (\r\n  <button\r\n    className={`menu-item${isActive && isActive() ? ' is-active' : ''}`}\r\n    onClick={action}\r\n    title={title}\r\n  >\r\n    <svg className=\"remix\">\r\n      <use xlinkHref={`${remixiconUrl}#ri-${icon}`} />\r\n    </svg>\r\n  </button>\r\n)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAcA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAOA;AARA;AAWA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AAGA;AACA;AA9BA;AACA;AA+BA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAOA;AADA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAOA;AADA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AADA;AAIA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AADA;AAIA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AAAA;AACA;AACA;AACA;AAAA;AADA;AADA;AADA;AAQA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AADA;AALA;AAHA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}